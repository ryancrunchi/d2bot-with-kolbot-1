// default.dbj gets executed upon gamejoin
js_strict(true);

include("require.js");
include('sdk.js');
include("OOG.js");

function main() {
	D2Bot.ingame();

	// wait until game is ready
	while (!me.gameReady) {
		delay(50);
	}

	// don't load default for mules
	if (getScript("D2BotMule.dbj")) {
		return true;
	}

	var i, sojPause, stats, anni,
		sojCounter = 0,
		startTime = getTickCount();

	this.scriptEvent = function (msg) {
		switch (msg) {
		case "soj":
			sojPause = true;
			sojCounter = 0;

			break;
		}
	};

	// Initialize libs - load config variables, build pickit list, attacks, containers and cubing and runeword recipes
	const Config = require('Config').call();
	const Pickit = require('Pickit');

	// Load events
	addEventListener("scriptmsg", this.scriptEvent);

	me.maxgametime = Config.MaxGameTime * 1000;
	stats = DataFile.getStats();

	// Check for experience decrease -> log death. Skip report if life chicken is disabled.
	if (stats.name === me.name && me.getStat(13) < stats.experience && Config.LifeChicken > 0) {
		D2Bot.printToConsole("You died in last game", 9);
		D2Bot.printToConsole("Experience decreased by " + (stats.experience - me.getStat(13)), 9);
		DataFile.updateStats("deaths");
		D2Bot.updateDeaths();
	}
	DataFile.updateStats(["experience", "name"]);
	me.switchWeapons(0); // always start at slot 0
	// Load threads
	load("tools/ToolsThread.js");

	if (Config.TownCheck || Config.TownHP || Config.TownMP) {
		load("tools/TownChicken.js");
	}

	if (Config.AntiHostile) {
		load("tools/AntiHostile.js");
	}

	const Town = require('Town');

	Town.getCorpse();
	// me.charlvl > 1 && Town.clearBelt();
	// me.charlvl > 1 && Town.clearInventory();
	Pickit.pickItems();

	me.automap = Config.AutoMap;

	const Misc = require('Misc');
	try {
		require('Loader').call();
	} catch(e) {
		Misc.errorReport(e);
	}

	if (Config.MinGameTime && getTickCount() - startTime < Config.MinGameTime * 1000) {
		try {
			Town.goToTown();

			while (getTickCount() - startTime < Config.MinGameTime * 1000) {
				me.overhead("Stalling for " + Math.round(((startTime + (Config.MinGameTime * 1000)) - getTickCount()) / 1000) + " Seconds");
				delay(1000);
			}
		} catch (e1) {
			print(e1);
		}
	}

	DataFile.updateStats("gold");

	if (sojPause) {
		(function () {
			const Town = require('Town');
			try {
				Town.goToTown();
				Town();

				me.maxgametime = 0;

				while (sojCounter < Config.SoJWaitTime) {
					me.overhead("Waiting for SoJ sales... " + (Config.SoJWaitTime - sojCounter) + " min");
					delay(6e4);

					sojCounter += 1;
				}
			} catch (e2) {
				print(e2);
			}
		}).call()
	}

	if (Config.LastMessage) {
		switch (typeof Config.LastMessage) {
		case "string":
			say(Config.LastMessage.replace("$nextgame", DataFile.getStats().nextGame, "i"));

			break;
		case "object":
			for (i = 0; i < Config.LastMessage.length; i += 1) {
				say(Config.LastMessage[i].replace("$nextgame", DataFile.getStats().nextGame, "i"));
			}

			break;
		}
	}


	const Storage = require('Storage');

	scriptBroadcast("quit");

	return true;
}
