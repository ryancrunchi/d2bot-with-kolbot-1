/***************************************************
 *
 *
 * You do not need to set-up anything here
 *    You do this in the profile config file
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

let StarterConfig = {
	JoinChannel: "", // Name of the channel to join
	FirstJoinMessage: "", // Message to say when first joining a channel, usually ".login"
	ChatActionsDelay: 2, // Seconds to wait in lobby before entering a channel

	JoinRetryDelay: 5, // Time in seconds to wait before next join attempt
	SwitchKeyDelay: 5, // Seconds to wait before switching a used/banned key or after realm down

	CrashDelay: 5, // Seconds to wait after a d2 window crash
	RealmDownDelay: 3, // Minutes to wait after getting Realm Down message
	UnableToConnectDelay: 5, // Minutes to wait after Unable To Connect message
	CDKeyInUseDelay: 5, // Minutes to wait before connecting again if CD-Key is in use. SwitchKeys overrides this!
	ConnectingTimeout: 20, // Seconds to wait before cancelling the 'Connecting...' screen
	PleaseWaitTimeout: 30, // Seconds to wait before cancelling the 'Please Wait...' screen
	WaitInLineTimeout: 60, // Seconds to wait before cancelling the 'Waiting in Line...' screen
	GameDoesNotExistTimeout: 30 // Seconds to wait before cancelling the 'Game does not exist.' screen
};

let JoinSettings = {};


// No touchy!
include('require.js');
include("OOG.js");

var i, j, joinInfo = {gameName: '', gamePass: '', up: false}, gameStart, ingame,
	firstLogin, chatActionsDone, lastGameTick, connectFail,
	gameCount = DataFile.getStats().runs + 1,
	loginRetry = 0,
	lastGameStatus = "ready",
	leader = "",
	lastGame = [];

const HeartBeat = require('./libs/modules/HeartBeat');
if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
}

function locationTimeout(time, location) {
	var endtime = getTickCount() + time;

	while (!me.ingame && getLocation() === location && endtime > getTickCount()) {
		delay(500);
	}

	return (getLocation() !== location);
}

function updateCount() {
	D2Bot.updateCount();
	delay(1000);
	ControlAction.click(6, 264, 366, 272, 35);

	try {
		login(me.profile);
	} catch (e) {

	}

	delay(1000);
	ControlAction.click(6, 33, 572, 128, 35);
}


function ReceiveCopyData(mode, msg) {
	switch (mode) {
		case 1: // JoinInfo
			//print("Got Join Info");

			joinInfo = JSON.parse(msg);

			break;
		case 2: // Game info
			print("Recieved Game Info");

			HeartBeat.gameInfo = JSON.parse(msg);

			break;
		case 3: // Game request
			if (HeartBeat.gameInfo) {
				let obj = JSON.parse(msg);

				D2Bot.joinMe(obj.profile, me.gamename || "", "", me.gamepassword || "", me.gameReady ? "yes" : "no");
			}

			break;
	}
}

function timer(tick) {
	if (!tick) {
		return "";
	}

	var min, sec;

	min = Math.floor((getTickCount() - tick) / 60000).toString();

	if (min <= 9) {
		min = "0" + min;
	}

	sec = (Math.floor((getTickCount() - tick) / 1000) % 60).toString();

	if (sec <= 9) {
		sec = "0" + sec;
	}

	return " (" + min + ":" + sec + ")";
}

function main() {
	debugLog(me.profile);
	const Team = require('./libs/modules/Team');
	const Delta = new (require('./libs/modules/Deltas'));
	addEventListener('copydata', ReceiveCopyData);

	while (!HeartBeat.handle) {
		delay(100);
	}

	require('./libs/modules/debug');
	Team.on('Follow', data => {
		joinInfo = typeof data.gameInfo === 'object' && data.gameInfo || {gameName: '', gamePass: '', up: false};
	});

	Delta.track(() => JSON.stringify(joinInfo),() => print(joinInfo));

	require('./libs/modules/Config')(); // execute the config file
	leader = Object.keys(JoinSettings).filter(key => JoinSettings[key].filter(item => item === me.profile).length);
	print(leader);

	let ticker = getTickCount();
	const Worker = require('./libs/modules/Worker');
	Worker.runInBackground.RequestGame = (() => (() => {
		if ((getTickCount() - ticker) < 100 || me.ingame || (ticker = getTickCount()) && false) return;
		leader.forEach(profile => {
			Team.send(profile, {RequestGame: {yep: true}})
		}); // Send request to request game
	})() || true);

	if (HeartBeat.gameInfo.error) {
		//D2Bot.retrieve();
		delay(200);

		if (!!DataFile.getStats().debugInfo) {
			HeartBeat.gameInfo.crashInfo = DataFile.getStats().debugInfo;

			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(HeartBeat.gameInfo.crashInfo).currScript + " Area: " + JSON.parse(HeartBeat.gameInfo.crashInfo).area, 10);
		}

		/*if (HeartBeat.gameInfo.crashInfo) {
			D2Bot.printToConsole("Crash Info: Script: " + HeartBeat.gameInfo.crashInfo.currScript + " Area: " + HeartBeat.gameInfo.crashInfo.area + (HeartBeat.gameInfo.crashInfo.hasOwnProperty("lastAction") ? " " + HeartBeat.gameInfo.crashInfo.lastAction : ""), 10);
		}*/

		ControlAction.timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	//D2Bot.store(JSON.stringify({currScript: "none", area: "out of game"}));
	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (true) {
		while (me.ingame) { // returns true before actually in game so we can't only use this check
			if (me.gameReady) { // returns false when switching acts so we can't use while
				if (!ingame) {
					print("Ã¿c4Updating Status");
					//D2Bot.updateStatus("Game: " + me.gamename);

					lastGameStatus = "ingame";
					ingame = true;
					gameStart = getTickCount();

					DataFile.updateStats("runs", gameCount);
				}

				//D2Bot.updateStatus("Game: " + me.gamename + timer(gameStart));
			}

			delay(1000);
		}

		locationAction();
		delay(1000);
	}
}

function joinCheck() {
	delay(500);

	print(leader + " " + joinInfo.inGame + " " + lastGame.toSource() + " " + joinInfo.gameName);

	if (!joinInfo.inGame || (lastGame.length && lastGame.indexOf(joinInfo.gameName) === -1)) {
		D2Bot.printToConsole("Game is finished. Stopping join delay.");

		return true;
	}

	return false;
}

function locationAction() {
	if (me.ingame) {
		return;
	}

	var i, string, control, text, location;

	location = getLocation();

	MainSwitch:
		switch (location) {
			case 0:
				ControlAction.click();

				break;
			case 1:	// Lobby
				D2Bot.updateStatus("Lobby");

				me.blockKeys = false;
				loginRetry = 0;

				if (!firstLogin) {
					firstLogin = true;
				}

				if (StarterConfig.JoinChannel !== "") {
					ControlAction.click(6, 27, 480, 120, 20);

					break;
				}

				if (ingame) {
					print("updating runs");
					D2Bot.updateRuns();

					lastGameTick = getTickCount();
					gameCount += 1;
					lastGameStatus = "ready";
					ingame = false;
				}

				if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
					break;
				}

				if (!locationTimeout(5000, location)) { // in case join button gets bugged
					if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
						break;
					}

					if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
						break;
					}
				}

				break;
			case 2: // Waiting In Line
				D2Bot.updateStatus("Waiting...");
				locationTimeout(StarterConfig.WaitInLineTimeout * 1e3, location);
				ControlAction.click(6, 433, 433, 96, 32);

				break;
			case 3: // Lobby Chat
				D2Bot.updateStatus("Lobby Chat");

				if (ingame) {
					print("updating runs");
					D2Bot.updateRuns();

					lastGameTick = getTickCount();
					gameCount += 1;
					lastGameStatus = "ready";
					ingame = false;
				}

				if (!chatActionsDone) {
					chatActionsDone = true;

					ControlAction.timeoutDelay("Chat delay", StarterConfig.ChatActionsDelay * 1e3);
					say("/j " + StarterConfig.JoinChannel);
					delay(1000);

					if (StarterConfig.FirstJoinMessage !== "") {
						say(StarterConfig.FirstJoinMessage);
						delay(500);
					}
				}

				if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
					break;
				}

				if (!locationTimeout(5000, location)) { // in case join button gets bugged
					if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
						break;
					}

					if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
						break;
					}
				}

				break;
			case 4: // Create Game
				break;
			case 5: // Join Game
				D2Bot.updateStatus("Join Game");

				JoinLoop2:
					for (i = 0; i < 5; i += 1) {
						for (j = 0; j < leader.length; j += 1) {
							delay(100);

							if (joinInfo && joinInfo.gameName !== "" && (lastGame.indexOf(joinInfo.gameName) === -1 || lastGameStatus === "pending")) {
								ControlAction.setText(1, 606, 148, 155, 20, joinInfo.gamePass);
								ControlAction.setText(1, 432, 148, 155, 20, joinInfo.gameName);

								if (lastGameStatus === "pending" || (HeartBeat.gameInfo.error && DataFile.getStats().gameName === joinInfo.gameName)) {
									D2Bot.printToConsole("Failed to join game");
									ControlAction.timeoutDelay("Join Delay", StarterConfig.JoinRetryDelay * 1000, joinCheck, leader[j]);
									D2Bot.updateRuns();
									D2Bot.requestGame(leader[j]);
									delay(200);

									if (!joinInfo.up) {
										lastGameStatus = "ready";

										break;
									}
								}

								if (!joinInfo.up) {
									continue;
								}

								// Don't join immediately after previous game to avoid FTJ
								if (getTickCount() - lastGameTick < 5000) {
									ControlAction.timeoutDelay("Game Delay", (lastGameTick - getTickCount() + 5000));
								}

								print("joining game " + joinInfo.gameName);

								if (typeof StarterConfig.JoinDelay === "number") {
									ControlAction.timeoutDelay("Custom Join Delay", StarterConfig.JoinDelay * 1e3);
								}

								me.blockMouse = true;

								DataFile.updateStats("gameName", joinInfo.gameName);
								ControlAction.click(6, 594, 433, 172, 32);

								me.blockMouse = false;

								lastGame.push(joinInfo.gameName);

								if (lastGame.length > leader.length) { // Might need a fixed number. Right now it stores 1 game per leader.
									lastGame.shift();
								}

								lastGameStatus = "pending";

								locationTimeout(15000, location);

								break JoinLoop2;
							}
						}
					}

				break;
			case 6: // Ladder
				break;
			case 7: // Channel List
				break;
			case 8: // Main Menu
			case 9: // Login
			case 12: // Character Select
			case 18: // D2 Splash
				// Single Player screen fix
				if (getLocation() === 12 && !getControl(4, 626, 100, 151, 44)) {
					ControlAction.click(6, 33, 572, 128, 35);

					break;
				}

				if (firstLogin && getLocation() === 9) { // multiple realm botting fix in case of R/D or disconnect
					ControlAction.click(6, 33, 572, 128, 35);
				}

				D2Bot.updateStatus("Logging In");

				try {
					login(me.profile);
				} catch (e) {
					if (getLocation() === 12 && loginRetry < 2) {
						if (loginRetry === 0) {
							// start from beginning of the char list
							sendKey(0x24);
						}

						control = getControl(4, 237, 457, 72, 93); // char on 1st column, 4th row

						if (control) {
							me.blockMouse = true;
							me.blockKeys = true;

							control.click();
							sendKey(0x28);
							sendKey(0x28);
							sendKey(0x28);
							sendKey(0x28);

							me.blockMouse = false;
						}

						loginRetry++;
					} else {
						me.blockKeys = false;
						print(e + " " + getLocation());
					}
				}

				break;
			case 10: // Login Error
				string = "";
				text = ControlAction.getText(4, 199, 377, 402, 140);

				if (text) {
					for (i = 0; i < text.length; i += 1) {
						string += text[i];

						if (i !== text.length - 1) {
							string += " ";
						}
					}

					switch (string) {
						case getLocaleString(5207):
							D2Bot.updateStatus("Invalid Password");
							D2Bot.printToConsole("Invalid Password");

							break;
						case getLocaleString(5208):
							D2Bot.updateStatus("Invalid Account");
							D2Bot.printToConsole("Invalid Account");

							break;
						case getLocaleString(5202): // cd key intended for another product
						case getLocaleString(10915): // lod key intended for another product
							D2Bot.updateStatus("Invalid CDKey");
							D2Bot.printToConsole("Invalid CDKey: " + HeartBeat.gameInfo.mpq, 6);
							D2Bot.CDKeyDisabled();

							if (HeartBeat.gameInfo.switchKeys) {
								ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
								D2Bot.restart(true);
							} else {
								D2Bot.stop();
							}

							break;
						case getLocaleString(5199):
							D2Bot.updateStatus("Disabled CDKey");
							D2Bot.printToConsole("Disabled CDKey: " + HeartBeat.gameInfo.mpq, 6);
							D2Bot.CDKeyDisabled();

							if (HeartBeat.gameInfo.switchKeys) {
								ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
								D2Bot.restart(true);
							} else {
								D2Bot.stop();
							}

							break;
						case getLocaleString(10913):
							D2Bot.updateStatus("Disabled LoD CDKey");
							D2Bot.printToConsole("Disabled LoD CDKey: " + HeartBeat.gameInfo.mpq, 6);
							D2Bot.CDKeyDisabled();

							if (HeartBeat.gameInfo.switchKeys) {
								ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
								D2Bot.restart(true);
							} else {
								D2Bot.stop();
							}

							break;
						case getLocaleString(5347):
							D2Bot.updateStatus("Disconnected");
							D2Bot.printToConsole("Disconnected");
							ControlAction.click(6, 335, 412, 128, 35);

							break MainSwitch;
						default:
							D2Bot.updateStatus("Login Error");
							D2Bot.printToConsole("Login Error - " + string);

							if (HeartBeat.gameInfo.switchKeys) {
								ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
								D2Bot.restart(true);
							} else {
								D2Bot.stop();
							}

							break;
					}
				}

				ControlAction.click(6, 335, 412, 128, 35);

				while (true) {
					delay(1000);
				}

				break;
			case 11: // Unable To Connect
				D2Bot.updateStatus("Unable To Connect");

				if (connectFail) {
					ControlAction.timeoutDelay("Unable to Connect", StarterConfig.UnableToConnectDelay * 6e4);

					connectFail = false;
				} else {
					connectFail = true;
				}

				if (!ControlAction.click(6, 335, 450, 128, 35)) {
					break;
				}

				break;
			case 13: // Realm Down - Character Select screen
				D2Bot.updateStatus("Realm Down");
				delay(1000);

				if (!ControlAction.click(6, 33, 572, 128, 35)) {
					break;
				}

				updateCount();
				ControlAction.timeoutDelay("Realm Down", StarterConfig.RealmDownDelay * 6e4);
				D2Bot.CDKeyRD();

				if (HeartBeat.gameInfo.switchKeys && !HeartBeat.gameInfo.rdBlocker) {
					D2Bot.printToConsole("Realm Down - Changing CD-Key");
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.printToConsole("Realm Down - Restart");
					D2Bot.restart();
				}

				break;
			case 14: // Character Select - Disconnected
				D2Bot.updateStatus("Disconnected");
				delay(500);
				ControlAction.click(6, 351, 337, 96, 32);

				break;
			case 16: // Character Select - Please Wait popup
				if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
					ControlAction.click(6, 351, 337, 96, 32);
				}

				break;
			case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
				delay(1000);
				ControlAction.click(6, 351, 337, 96, 32);

				break;
			case 19: // Login - Cdkey In Use
				D2Bot.printToConsole(HeartBeat.gameInfo.mpq + " is in use by " + ControlAction.getText(4, 158, 310, 485, 40), 6);
				D2Bot.CDKeyInUse();

				if (HeartBeat.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					ControlAction.timeoutDelay("CD-Key in use", StarterConfig.CDKeyInUseDelay * 6e4);
					ControlAction.click(6, 335, 450, 128, 35);
				}

				break;
			case 20: // Single Player - Select Difficulty
				break;
			case 21: // Main Menu - Connecting
				if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
					ControlAction.click(6, 330, 416, 128, 35);
				}

				break;
			case 22: // Login - Invalid Cdkey (classic or xpac)
				text = ControlAction.getText(4, 162, 270, 477, 50);
				string = "";

				if (text) {
					for (i = 0; i < text.length; i += 1) {
						string += text[i];

						if (i !== text.length - 1) {
							string += " ";
						}
					}
				}

				switch (string) {
					case getLocaleString(10914):
						D2Bot.printToConsole(HeartBeat.gameInfo.mpq + " LoD key in use by " + ControlAction.getText(4, 158, 310, 485, 40), 6);
						D2Bot.CDKeyInUse();

						if (HeartBeat.gameInfo.switchKeys) {
							ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
							D2Bot.restart(true);
						} else {
							ControlAction.click(6, 335, 450, 128, 35);
							ControlAction.timeoutDelay("LoD key in use", StarterConfig.CDKeyInUseDelay * 6e4);
						}

						break;
					default:
						if (HeartBeat.gameInfo.switchKeys) {
							D2Bot.printToConsole("Invalid CD-Key");
							ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
							D2Bot.restart(true);
						} else {
							ControlAction.click(6, 335, 450, 128, 35);
							ControlAction.timeoutDelay("Invalid CD-Key", StarterConfig.CDKeyInUseDelay * 6e4);
						}

						break;
				}

				break;
			case 23: // Character Select - Connecting
			case 42: // Empty character screen
				string = "";
				text = ControlAction.getText(4, 45, 318, 531, 140);

				if (text) {
					for (i = 0; i < text.length; i += 1) {
						string += text[i];

						if (i !== text.length - 1) {
							string += " ";
						}
					}

					if (string === getLocaleString(11161)) { // CDKey disabled from realm play
						D2Bot.updateStatus("Realm Disabled CDKey");
						D2Bot.printToConsole("Realm Disabled CDKey: " + HeartBeat.gameInfo.mpq, 6);
						D2Bot.CDKeyDisabled();

						if (HeartBeat.gameInfo.switchKeys) {
							ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
							D2Bot.restart(true);
						} else {
							D2Bot.stop();
						}
					}
				}

				if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
					ControlAction.click(6, 33, 572, 128, 35);

					if (HeartBeat.gameInfo.rdBlocker) {
						D2Bot.restart();
					}
				}

				break;
			case 24: // Server Down - not much to do but wait..
				break;
			case 25: // Lobby - Please Wait
				if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
					ControlAction.click(6, 351, 337, 96, 32);
				}

				break;
			case 26: // Lobby - Game Name Exists
				break;
			case 27: // Gateway Select
				ControlAction.click(6, 436, 538, 96, 32);

				break;
			case 28: // Lobby - Game Does Not Exist
				D2Bot.printToConsole("Game doesn't exist");

				if (HeartBeat.gameInfo.rdBlocker) {
					D2Bot.printToConsole(HeartBeat.gameInfo.mpq + " is probably flagged.", 6);

					if (HeartBeat.gameInfo.switchKeys) {
						ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
						D2Bot.restart(true);
					}
				} else {
					locationTimeout(StarterConfig.GameDoesNotExistTimeout * 1e3, location);
				}

				lastGameStatus = "ready";

				break;
			case 38: // Game is full
				D2Bot.printToConsole("Game is full");
				ControlAction.click(6, 652, 469, 120, 20);
				lastGame.push(joinInfo.gameName);

				lastGameStatus = "ready";

				break;
			default:
				if (location !== undefined) {
					D2Bot.printToConsole("Unhandled location " + location);
					//takeScreenshot();
					delay(500);
					D2Bot.restart();
				}

				break;
		}
}
