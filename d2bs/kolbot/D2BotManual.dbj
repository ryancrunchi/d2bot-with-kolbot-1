/** @description Development script. Easy to test multiple bots in TCP IP.
 * @Author Jaenster
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * How to set up?
 * Go to your profile config and setup the following 2 config settings:
 * You do not need to set anything in D2Bot#, just select this entry file

 StarterConfig.LoginChar = 'EpicSorc'; // Char you login with
 StarterConfig.Follower = true; // Follow, or false if you want to host a tcp/ip game




 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
let StarterConfig = {
	LoginChar: '', // setup in your config file which char you gonna play with (StarterConfig.LoginChar = 'yourChar';
	Follower: false, // Create tcp/ip game, or join one
};


// I wrote to bot correctly with TCP/Ip, as the regular scripts try to connect with a server that isnt up.
// i cant see if someone wants to play via TCP/Ip, as login(); already tries to join the game, even if itnt up.
// wrote this from scratch, it isn't perfect
print('ÿc2Jaensterÿc0 :: Started D2BotManual.dbj');
include('require.js');
include("sdk.js");
getLocation() === sdk.locations.None && sendKey(32); // skip splash screen
include("OOG.js");
const HeartBeat = require('./libs/modules/HeartBeat');

function main() {
	while (!(HeartBeat.handle && Object.keys(HeartBeat.gameInfo).length)) delay(10);
	let lastGame = {
		name: '',
		pass: '',
	};
	require('./libs/modules/debug');
	require('./libs/modules/Config').call();

	const LocationEvents = require('./libs/modules/LocationEvents'),
		Promise = require('./libs/modules/Promise'),
		Worker = require('./libs/modules/Worker'),
		Control = require('./libs/modules/Control');

	LocationEvents.on(sdk.locations.JoinGame, () => {
		Control.JoinGameName.setText(lastGame.name);
		Control.JoinGamePass.setText(lastGame.pass);
	});

	const inGame = () => new Promise(x => me.gameReady && me.ingame && me.gamename && x())
		.then(() => {
			lastGame = {name: me.gamename, pass: me.gamepassword};
			new Promise(x => !me.ingame && x()).then(inGame);
		});
	inGame();

	while (true) {
		delay(10);
	}
}