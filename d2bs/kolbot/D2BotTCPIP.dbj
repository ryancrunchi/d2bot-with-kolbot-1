/** @description Development script. Easy to test multiple bots in TCP IP.
 * @Author Jaenster
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * How to set up?
 * Go to your profile config and setup the following 2 config settings:
 * You do not need to set anything in D2Bot#, just select this entry file

 StarterConfig.LoginChar = 'EpicSorc'; // Char you login with
 StarterConfig.Follower = true; // Follow, or false if you want to host a tcp/ip game




 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
let StarterConfig = {
	LoginChar: '', // setup in your config file which char you gonna play with (StarterConfig.LoginChar = 'yourChar';
	Follower: false, // Create tcp/ip game, or join one
};


// I wrote to bot correctly with TCP/Ip, as the regular scripts try to connect with a server that isnt up.
// i cant see if someone wants to play via TCP/Ip, as login(); already tries to join the game, even if itnt up.
// wrote this from scratch, it isn't perfect
print('ÿc2Jaensterÿc0 :: Started D2BotTcpJoin.dbj');
include('require.js');
include("sdk.js");
include("OOG.js");

function main() {
	const HeartBeat = require('./libs/modules/HeartBeat');
	while (!(HeartBeat.handle && Object.keys(HeartBeat.gameInfo).length)) delay(10);

	const LocationEvents = require('./libs/modules/LocationEvents');
	const Promise = require('./libs/modules/Promise');
	const Worker = require('./libs/modules/Worker');
	const Config = require('./libs/modules/Config').call();
	const Control = require('./libs/modules/Control');
	const Team = require('./libs/modules/Team');

	// create datafile (needs some refactoring trough)
	!FileTools.exists("data/" + me.profile + ".json") && DataFile.create();

	// Normal flow
	LocationEvents.on(sdk.locations.MainMenu, () => Control.OtherMultiplayer.click());
	LocationEvents.on(sdk.locations.OtherMultiplayer, () => Control.TcpIp.click());
	LocationEvents.on(sdk.locations.TCPIP, function () {
		if (StarterConfig.Follower) {
			return Control.TcpIpJoin.click();
		}
		return Control.TcpIpHost.click();
	});

	LocationEvents.on(sdk.locations.CharSelect, () => {
		HeartBeat.gameInfo.charName = StarterConfig.LoginChar;
		ControlAction.loginCharacter(HeartBeat.gameInfo)
	});
	LocationEvents.on(sdk.locations.Difficulty, function () {
		switch (HeartBeat.gameInfo.difficulty) {
			case 'Normal':
				return Control.NormalSP.click();
			case 'Nightmare':
				return Control.NightmareSP.click();
			case 'Hell':
				return Control.HellSP.click();
			default: // highest
				return [Control.HellSP, Control.NightmareSP, Control.NormalSP].filter(x => x.control)[0].click();
		}
	});

	// error handling
	LocationEvents.on(sdk.locations.CantConnectTCP, () => Control.OkCentered.click()); // takes us back to TCP window

	let PromiseToConnectRunning;
	Team.on('tcp', function (msg) {
		if (msg.hasOwnProperty('gameup') && msg.hasOwnProperty('gameserver')) {
			if (msg.gameserver && msg.gameup) {
				if (!PromiseToConnectRunning) {
					PromiseToConnectRunning = new Promise(resolve => getLocation() === sdk.locations.EnterIP && resolve())
						.then(function () {
							Control.IPAdress.setText(msg.gameserver);
							Control.IPAdressOk.click();
							PromiseToConnectRunning = undefined; // unset the variable
						})
				}
			}
		}
		if (msg.hasOwnProperty('requestGame')) {
			return msg.reply({tcp: {gameup: me.ingame, gameserver: me.gameserverip}});
		}
	});

	let timer = getTickCount() - 3000;
	StarterConfig.Follower && (Worker.runInBackground.TCP = () => {
		if (me.ingame) return true; // in game, dont need game info

		// Only ask every 3 seconds
		if ((getTickCount() - timer) < 3000 || (timer = getTickCount()) && false) return true;

		Team.broadcast({tcp: {requestGame: true}});
		return true;
	});

	// Fast forward to main screen
	getLocation() === sdk.locations.None && sendKey(32);

	while (true) {
		delay(10);
	}
}